name: Fullstack CI/CD (Monorepo with Submodules)

on:
  push:
    branches:
      - main # Akan terpicu untuk setiap perubahan di branch main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main # Akan terpicu untuk setiap perubahan di branch main

permissions:
  contents: read # Izin dasar untuk membaca konten repositori

jobs:
  # Job untuk CI/CD Frontend React
  frontend_ci_cd:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./react-frontend-auth # Semua perintah akan dijalankan di direktori ini
    env: # <<< Tambahkan bagian env di sini untuk variabel level job
      API_BASE_PATH: ${{ vars.API_BASE_PATH }}
      API_AUTH_URL: ${{ vars.API_AUTH_URL }}
      USERS_ME_URL: ${{ vars.USERS_ME_URL }} # Mengakses variabel repositori
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: true # PENTING: Untuk mengambil submodul

    - name: Set up Node.js for Frontend
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Gunakan versi Node.js yang Anda gunakan
        cache: 'npm'
        cache-dependency-path: './react-frontend-auth/package-lock.json' # Cache spesifik untuk frontend

    - name: Install Frontend dependencies
      run: npm ci

    - name: Run Frontend ESLint
      run: npm run lint

    - name: Run Frontend tests
      run: npm test -- --watchAll=false

    - name: Build Frontend app
      run: npm run build
      env:
        CI: true # Mengatur CI=true untuk mencegah peringatan yang dianggap sebagai error

  # Job untuk CI/CD Backend FastAPI
  backend_ci_cd:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: py_auth_db # Database default yang dibuat oleh image
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    defaults:
      run:
        working-directory: ./python-fast-api-auth # Semua perintah akan dijalankan di direktori ini
    env: # <<< Tambahkan bagian env di sini untuk variabel level jobDB_USER="postgres"
      DB_PASSWORD: ${{ vars.DB_PASSWORD }} # Mengakses variabel repositori
      DB_HOST: localhost # Gunakan 'localhost' atau 'postgres' (nama service)
      DB_PORT: ${{ vars.DB_PORT }}
      DB_NAME: ${{ vars.DB_NAME }}
      DB_USER: ${{ vars.DB_USER }}
      # Pastikan variabel lingkungan untuk JWT juga ada di sini jika dibutuhkan oleh pytest
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRE_MINUTES }}
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: true # PENTING: Untuk mengambil submodul

    - name: Set up Python 3.12 for Backend
      uses: actions/setup-python@v5 # Menggunakan v5 untuk fitur cache yang lebih baik
      with:
        python-version: "3.12"
        cache: 'pip'
        cache-dependency-path: './python-fast-api-auth/requirements.txt' # Cache spesifik untuk backend

    - name: Install Backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest # Pastikan pytest terinstal
        pip install Flask Flask-SQLAlchemy # Pastikan Flask dan Flask-SQLAlchemy terinstal
        # Pastikan Alembic terinstal, jika tidak ada di requirements.txt
        pip install alembic
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run Alembic Migrations
      run: |
        # Pastikan environment variable untuk database diatur dengan benar untuk Alembic
        # (DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD)
        # Alembic akan menggunakan database ini untuk menerapkan migrasi.
        # Pastikan Anda menggunakan database pengujian yang berbeda dari database produksi Anda.
        alembic upgrade head
      env:
        # Variabel lingkungan untuk Alembic jika dibutuhkan, jika tidak maka akan diambil dari env job
        DB_PASSWORD: ${{ vars.DB_PASSWORD }}
        DB_HOST: localhost
        DB_PORT: ${{ vars.DB_PORT }}
        DB_NAME: py_auth_db # Alembic akan bermigrasi ke database ini
        DB_USER: ${{ vars.DB_USER }}
        # Jika Anda ingin Alembic bermigrasi ke py_auth_db_test, pastikan DB_NAME disetel ke itu.
        # Atau, Anda bisa membuat database pengujian terpisah di sini dan mengarahkannya.
        # Untuk kesederhanaan, kita asumsikan py_auth_db adalah database target untuk migrasi di CI.

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        # Pytest sekarang akan berjalan melawan skema yang telah dimigrasi oleh Alembic
        PYTHONPATH=. pytest -v tests/

  # Job untuk SonarQube Scan
  sonarqube:
    name: SonarQube Scan for Backend
    runs-on: ubuntu-latest
    needs: backend_ci_cd # Jalankan setelah backend_ci_cd berhasil
    if: github.ref == 'refs/heads/main' # Opsional: Hanya jalankan di branch main untuk menghindari scan berulang pada PR

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
          submodules: true # Pastikan submodul diambil

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: python-fast-api-auth